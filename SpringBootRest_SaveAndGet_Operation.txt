			
		Level-I - Mini Project using ReST
		Spring Boot ReST + Data JPA + MySQL
Exception handling
https://www.youtube.com/c/NareshIT/search?query=spring+boot+exception

#1. Create Spring Starter Project
Name : SringBootRestJpaMySQLApp
Dep: Web, mylsq, datajpa, lombok, devtools

#2. Model class
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import lombok.Data;

@Data
@Entity
public class Product {
	@Id
	@GeneratedValue
	private Integer id;
	
	private String prodCode;
	private Double prodCost;
	private String vendorName;
	private Double prodGst;
	
}


#3(a). Repository Interface
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.model.Product;

public interface ProductRepository extends JpaRepository<Product, Integer> {

}

#3(b). Custom Exception
package in.nareshit.raghu.exception;

public class ProductNotFoundException extends RuntimeException {
	private static final long serialVersionUID = 1L;

	public ProductNotFoundException() {
		super();
	}
	
	public ProductNotFoundException(String message) {
		super(message);
	}
}


#4. Service interface

package in.nareshit.raghu.service;

import java.util.List;

import in.nareshit.raghu.model.Product;

public interface IProductService {

	Integer saveProduct(Product p);
	void updateProduct(Product p);
	void deleteProduct(Integer id);
	Product getOneProduct(Integer id);
	List<Product> getAllProduct();
}

#5. Service Impl class

package in.nareshit.raghu.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.nareshit.raghu.exception.ProductNotFoundException;
import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.repo.ProductRepository;
import in.nareshit.raghu.service.IProductService;
import in.nareshit.raghu.util.ProductUtil;

@Service
public class ProductServiceImpl implements IProductService {
	@Autowired
	private ProductRepository repo;
	
	@Autowired
	private ProductUtil util;

	@Override
	public Integer saveProduct(Product p) {
		util.calculateGst(p);
		return repo.save(p).getId();
	}

	@Override
	public void updateProduct(Product p) {
		util.calculateGst(p);
		repo.save(p);
	}

	@Override
	public void deleteProduct(Integer id) {
		Product p = getOneProduct(id);
		repo.delete(p);
	}

	@Override
	public Product getOneProduct(Integer id) {
		Product p = repo.findById(id)
		.orElseThrow(()-> new ProductNotFoundException(
				new StringBuffer()
				.append("Product '")
				.append(id)
				.append("' not exist")
				.toString())
				);
		return p;
	}

	@Override
	public List<Product> getAllProduct() {
		List<Product> list = repo.findAll();
		list.sort(
				(p1,p2) -> 
				p1.getId().compareTo(p2.getId())
				);
		return list;
	}

}


#5(b). Util(Helper)
package in.nareshit.raghu.util;

import org.springframework.stereotype.Component;

import in.nareshit.raghu.model.Product;

@Component
public class ProductUtil {

	public Product calculateGst(Product p) {
		var cost = p.getProdCost();
		p.setProdGst(cost * 12/100.0);
		return p;
	}
}


#6. RestController

package in.nareshit.raghu.controller.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import in.nareshit.raghu.model.Product;
import in.nareshit.raghu.service.IProductService;

@RestController
@RequestMapping("/product")
public class ProductRestController {
	@Autowired
	private IProductService service; //HAS-A

	/**
	 * This operation indicates Read JSON data from 
	 * HTTP Request (Body) and convert into Object
	 * using @RequestBody Annotation.
	 * 
	 * By using service Layer save data to product table.
	 * Returns Response as Entity with 201 CREATED 
	 * Else 500 - INTERNAL SERVER ERROR
	 * 
	 * @param product
	 * @return ResponseEntity<String>
	 */
	
	@PostMapping("/save")
	public ResponseEntity<String> saveProduct(
			@RequestBody Product product) 
	{
		ResponseEntity<String> resp = null;
		try {
			Integer id = service.saveProduct(product);
			resp = new ResponseEntity<String>(
					"Product '"+id+"' Created", 
					HttpStatus.CREATED); //201-Created
		} catch (Exception e) {
			e.printStackTrace();
			resp = new ResponseEntity<String>(
					"Unable to save Product", 
					HttpStatus.INTERNAL_SERVER_ERROR); //500-ISE
		}
		return resp;
	}
	
	/**
	 * This operations takes no Input, if you want you can Accept Header (optional) 
	 * for XML Output only. Default Gives JSON Output if data exist,
	 * else returns empty collection like [].
	 * @return ResponseEntity
	 */
	@GetMapping("/all")
	public ResponseEntity<?> getAllProducts() {
		ResponseEntity<?> resp = null;
		try {
			List<Product> list =  service.getAllProduct();
			resp = new ResponseEntity<List<Product>>(
					list,
					HttpStatus.OK);//200-OK
		} catch (Exception e) {
			resp = new ResponseEntity<String>(
					"Unable to save Product", 
					HttpStatus.INTERNAL_SERVER_ERROR); //500-ISE
		}
		return resp;
	}
	
	
}


#7. Exception handler


---SAVE OPERATION----------------------
POST http://localhost:8080/product/save SEND
     Body
          (*) RAW  JSON
{
    "prodCode" : "TV",
    "prodCost" : 9500.0,
    "vendorName" : "SAMSUNG"
}
--------------------------------------

**TASK : Student(sid,sname,course,sfee,discount)**

=====================================
